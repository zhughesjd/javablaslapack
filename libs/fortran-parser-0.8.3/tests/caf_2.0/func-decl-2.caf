module module_bits

contains

!-------------------------------------------------------------------------------
! no type for alternate result
!-------------------------------------------------------------------------------
  function number_of_bits6(i) result(num)
  implicit none
  integer :: i, itmp 
    num = 0
    itmp = i
    do while (itmp .gt. 0)
       num = num + 1
       itmp = ishft(itmp, -1)
    end do
  end function number_of_bits6

end module module_bits



program test
use module_bits
integer :: error

error = 0
if (4 .ne. number_of_bits6(14)) then
   error = error + 1
endif

! Shouldn't actually be able to pass as this shouldn't compile
if (0 .ne. error) then
  write(*, '(A)') "Test failed"
else
  write(*, '(A)') "Test passed"
endif

end program test

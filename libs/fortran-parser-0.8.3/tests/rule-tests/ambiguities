R611.f03 substring-range
  NOTE 6.3
    P%NAME(1:1)
    ID(4:9)
  - (4:9) is parsed as a section-subscript-list with one section-subscript rather than substring-range
R615.f03 type-param-inquiry
  NOTE 6.8
    a%kind
    s%len
  - this is parsed as a data-ref with two part-refs
R630.f03 allocate-shape-spec
    allocate(x(3))
  - parses as section-subscript, this means that there is no stride and if hasUpperBound
    is false, hasLowerBound must be true and is the upper-bound-expr
  - the 3 must be converted to an upper-bound-expr
R1217.f03 function-reference
    foo(expr)
  - foo is parsed as a data-ref with a section-subscript-list
  - section-subscript-list is also an actual-arg-spec-list
  - see also R619.f03


Bryan is unable to trigger the following situations.  See the test cases for
my attempts.
R436	type_param_decl_list
R446	proc_component_attr_spec_list
R458	component_spec_list (ambiguous?)
R737	bounds_spec_list
R738	bounds_remapping_list
R1010	v_list (Where is this used in the parser?)

Need to check array_spec to make sure we have a valid list.

Trouble parsing data_stmt_value_list. Doesn't interpret reals correctly.

What about component_decl? Won't this get interpreted as a regular old declaration?
